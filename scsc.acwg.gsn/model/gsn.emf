@namespace(uri="http://scsc.acwg.gsn/2.0", prefix="gsn_")
package gsn;

import "http://omg.sacm/2.3/argumentation";


  class Module extends argumentation.ArgumentPackage {
  }

  class ContractModule extends argumentation.ArgumentPackageBinding {
  }

  class Choice extends argumentation.ArgumentAsset {
  }

  class Context extends argumentation.ArgumentAsset {
    attr boolean[1] isPublic = false;
    attr boolean[1] uninstantiated = false;
  }

  class Strategy extends argumentation.ArgumentReasoning {
    attr boolean[1] undeveloped = false;
    attr boolean[1] uninstantiated = false;
  }

  class Goal extends argumentation.Claim {
    attr boolean[1] isPublic = false;
    attr boolean[1] undeveloped = false;
    attr boolean[1] toBeSupportedByContract = false;
    attr boolean[1] uninstantiated = false;
  }

  class Justification extends argumentation.Claim {
  	attr boolean[1] isPublic = false;
  	attr boolean[1] uninstantiated = false;
  }

  class Assumption extends argumentation.Claim {
  	attr boolean[1] isPublic = false;
  	attr boolean[1] uninstantiated = false;
  }

  class AwayGoal extends argumentation.Claim {
  	attr String module;
  }
  
  class AwayAssumption extends argumentation.Claim {
  	attr String module;
  }
  
   class AwayJustification extends argumentation.Claim {
  	attr String module;
  }

  class AwaySolution extends argumentation.ArtifactReference {
  	attr String module;
  }

  class AwayContext extends argumentation.ArgumentAsset {
  	attr String module;
  }
  
  class ModuleReference extends argumentation.ArtifactReference {
  }
  
  class ContractModuleReference extends argumentation.ArtifactReference {
  }

  class Solution extends argumentation.ArtifactReference {
    attr boolean[1] isPublic = false;
    attr boolean[1] uninstantiated = false;
  }

  class SupportedBy extends argumentation.AssertedInference {
  	attr boolean[1] isMany = false;
  	attr boolean[1] isOptional = false;
  }

  class InContextOf extends argumentation.AssertedContext {
  	attr boolean[1] isMany = false;
  	attr boolean[1] isOptional = false;
  }

